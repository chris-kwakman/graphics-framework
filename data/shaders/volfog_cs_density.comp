#version 430

layout(local_size_x = 10, local_size_y = 10, local_size_z = 8) in;
const uint MAX_VOLFOG_INSTANCES = 256;

struct VolumetricFogInstance
{
    mat4    u_inv_m;
    float   u_density;
    float   u_density_attenuation;  // How density attenuates over height (i.e. distance from bottom of boundary box)
};

layout(std430, binding = 0) readonly buffer ssbo_volfog_instance_data
{
    VolumetricFogInstance volfog_instances[];
};

uniform ubo_fogcam
{
    // Do not reorder
    mat4 u_fog_cam_inv_vp;
    vec3 u_fog_cam_view_dir;
    float u_fog_cam_near;
    vec3 u_fog_cam_world_pos;
    float u_fog_cam_far;
    float u_layer_linearity;
    uint u_layer_count;
};

uniform ubo_shader_properties
{
	vec3	u_fog_albedo;
	float	u_scattering_coefficient;
	float	u_absorption_coefficient;
	float	u_phase_anisotropy;
    float   u_fog_noise_min;
    float   u_fog_noise_max;
    vec3    u_fog_wind_direction;
    float   u_fog_time;
    float   u_fog_noise_scale;
};

uniform image3D writeonly out_density;

shared VolumetricFogInstance shared_volfog_instances[MAX_VOLFOG_INSTANCES];
shared uint shared_volfog_instance_count = 0;

vec3 get_normalized_thread_global_id()
{
    return vec3(gl_GlobalInvocationID) / vec3(imageSize(out_density) - 1);
}

vec3 get_thread_ndc_pos()
{
    const vec3 offset = vec3(1.0) / imageSize(out_density);
    const vec3 ndc_min = vec3(-1)+offset;
    const vec3 ndc_max = vec3(1)-offset;
    const vec3 normalized_pos = get_normalized_thread_global_id();
    return ndc_min * (1-normalized_pos) + ndc_max * normalized_pos;
}

float linearize_value(float t, float a, float b, float linearity)
{  
    return (1 - linearity) * (a * pow(b / a, t)) + linearity * (a + t * (b-a));
}

// Uniformly distributes volumetric texel space into world space.
vec4 compute_thread_world_pos()
{
    vec3 normalized_global_id = get_normalized_thread_global_id();
    
    // Rather than using converting normalized [0,1] Z of thread global id to 
    // NDC directly, we first compute view depth, convert to ndc depth,
    // and use new ndc depth with NDC position to get proper world position.
    float n = u_fog_cam_near;
    float f = u_fog_cam_far;
    float view_depth = linearize_value(normalized_global_id.z, n, f, u_layer_linearity);
    float ndc_z = (f + n - (2*n*f)/view_depth)/(f-n);

    // Convert NDC to world position
    vec3 ndc_pos = vec3(get_thread_ndc_pos().xy, ndc_z);
    vec4 world_pos = u_fog_cam_inv_vp * vec4(ndc_pos, 1);
    return world_pos / world_pos.w;
}

// Thickness of slice - non-constant due to exponential slice distrubtion.
float compute_layer_thickness()
{
    uint layer_count = imageSize(out_density).z;

    // Get layer using GlobalInvocationID
    uint fog_texture_layer = gl_GlobalInvocationID.z;

    // Get [min,max] boundaries of this layer in UV space.
    const float uv_z_min = float(fog_texture_layer) / float(layer_count);
    const float uv_z_max = float(fog_texture_layer+1) / float(layer_count);

    // Get view depth for uv_z_min and uv_z_max
    const float view_depth_min = linearize_value(uv_z_min, u_fog_cam_near, u_fog_cam_far, u_layer_linearity);
    const float view_depth_max = linearize_value(uv_z_max, u_fog_cam_near, u_fog_cam_far, u_layer_linearity);

    return view_depth_max - view_depth_min;
}

vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec4 P){
  vec4 Pi0 = floor(P); // Integer part for indexing
  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec4 Pf0 = fract(P); // Fractional part for interpolation
  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = vec4(Pi0.zzzz);
  vec4 iz1 = vec4(Pi1.zzzz);
  vec4 iw0 = vec4(Pi0.wwww);
  vec4 iw1 = vec4(Pi1.wwww);

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);
  vec4 ixy00 = permute(ixy0 + iw0);
  vec4 ixy01 = permute(ixy0 + iw1);
  vec4 ixy10 = permute(ixy1 + iw0);
  vec4 ixy11 = permute(ixy1 + iw1);

  vec4 gx00 = ixy00 / 7.0;
  vec4 gy00 = floor(gx00) / 7.0;
  vec4 gz00 = floor(gy00) / 6.0;
  gx00 = fract(gx00) - 0.5;
  gy00 = fract(gy00) - 0.5;
  gz00 = fract(gz00) - 0.5;
  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
  vec4 sw00 = step(gw00, vec4(0.0));
  gx00 -= sw00 * (step(0.0, gx00) - 0.5);
  gy00 -= sw00 * (step(0.0, gy00) - 0.5);

  vec4 gx01 = ixy01 / 7.0;
  vec4 gy01 = floor(gx01) / 7.0;
  vec4 gz01 = floor(gy01) / 6.0;
  gx01 = fract(gx01) - 0.5;
  gy01 = fract(gy01) - 0.5;
  gz01 = fract(gz01) - 0.5;
  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
  vec4 sw01 = step(gw01, vec4(0.0));
  gx01 -= sw01 * (step(0.0, gx01) - 0.5);
  gy01 -= sw01 * (step(0.0, gy01) - 0.5);

  vec4 gx10 = ixy10 / 7.0;
  vec4 gy10 = floor(gx10) / 7.0;
  vec4 gz10 = floor(gy10) / 6.0;
  gx10 = fract(gx10) - 0.5;
  gy10 = fract(gy10) - 0.5;
  gz10 = fract(gz10) - 0.5;
  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
  vec4 sw10 = step(gw10, vec4(0.0));
  gx10 -= sw10 * (step(0.0, gx10) - 0.5);
  gy10 -= sw10 * (step(0.0, gy10) - 0.5);

  vec4 gx11 = ixy11 / 7.0;
  vec4 gy11 = floor(gx11) / 7.0;
  vec4 gz11 = floor(gy11) / 6.0;
  gx11 = fract(gx11) - 0.5;
  gy11 = fract(gy11) - 0.5;
  gz11 = fract(gz11) - 0.5;
  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
  vec4 sw11 = step(gw11, vec4(0.0));
  gx11 -= sw11 * (step(0.0, gx11) - 0.5);
  gy11 -= sw11 * (step(0.0, gy11) - 0.5);

  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);

  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));
  g0000 *= norm00.x;
  g0100 *= norm00.y;
  g1000 *= norm00.z;
  g1100 *= norm00.w;

  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));
  g0001 *= norm01.x;
  g0101 *= norm01.y;
  g1001 *= norm01.z;
  g1101 *= norm01.w;

  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));
  g0010 *= norm10.x;
  g0110 *= norm10.y;
  g1010 *= norm10.z;
  g1110 *= norm10.w;

  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));
  g0011 *= norm11.x;
  g0111 *= norm11.y;
  g1011 *= norm11.z;
  g1111 *= norm11.w;

  float n0000 = dot(g0000, Pf0);
  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
  float n1111 = dot(g1111, Pf1);

  vec4 fade_xyzw = fade(Pf0);
  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
  return 2.2 * n_xyzw;
}
void main(void)
{
    // Have the first local thread in a given workgroup copy
    // copy volumetric fog instance data to shared array.

    if(any(greaterThan(get_normalized_thread_global_id(), vec3(1))))
        return;

    if(gl_LocalInvocationIndex == 0)
    {
        shared_volfog_instance_count = volfog_instances.length();
        for(uint i = 0; i < shared_volfog_instance_count; ++i)
        {
            shared_volfog_instances[i] = volfog_instances[i];
        }
    }
    memoryBarrier();
    barrier();

    // Convert global invocation ID to position in NDC space.

    // Outdated technique: Sampling linearly in NDC space, then transforming point into
    // world space where points will be exponentially distributed.

    // Bring NDC position of current thread to world position.
    // vec4 world_pos = u_fog_cam_inv_vp * vec4(ndc_pos,1);
    // world_pos /= world_pos.w;

    // New technique: Sampling linearly in view space, then transforming point into
    // world space where points will also be linearly distributed.

    const vec4 world_pos = compute_thread_world_pos();

    // Iterate through volumetric fog instances
    // Bring world position of thread to local space of each instance, and test if it
    // lies inside the boundaries of the model.
    
    // TODO: Chose type of boundary depending on type of shape of volumetric fog instance.
    // Sphere: Test if distance from (0,0,0) in local space is lower than radius.
    // Cuboid: Test if local space position is within [-1,1] boundary on all axes.

    float write_fog_density = 0.0;
    for(unsigned int i = 0; i < shared_volfog_instance_count; ++i)
    {
        VolumetricFogInstance instance = shared_volfog_instances[i];
        const vec4 fog_pos = instance.u_inv_m * world_pos;
        // Assume cuboid for now.
        if(all(greaterThan(fog_pos.xyz, vec3(-1)) && lessThan(fog_pos.xyz, vec3(1))))
        {
            float fog_bottom = (inverse(instance.u_inv_m) * vec4(fog_pos.x,-1,fog_pos.z,1)).y;
            float height = max(world_pos.y - fog_bottom,0);
            float uniform_density = instance.u_density * exp(-height*instance.u_density_attenuation);
            // Temporal noise due to variating density and wind.
            uniform_density *= mix(u_fog_noise_min, u_fog_noise_max, cnoise(vec4(world_pos.xyz - u_fog_wind_direction * u_fog_time, 0) * u_fog_noise_scale));
            // Higher frequency noise to add more detail.
            //uniform_density *= mix(0.5,1.0, cnoise(vec4(world_pos.xyz - u_fog_wind_direction * u_fog_time * 0.5, 0) * 0.25));
            write_fog_density += uniform_density * compute_layer_thickness();
        }
    }
    // TODO: Temporal variation using perlin noise varying over time.

    // Store accumulated data of fog instances into texture at texel corresponding to local thread's sampled texel.
    write_fog_density = max(write_fog_density, 0);
    imageStore(out_density, ivec3(gl_GlobalInvocationID), vec4(write_fog_density,0,0,0));
}